#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fablabnv:server');
var http = require('http');
var sp = require('serialport');
var SerialPort = sp.SerialPort;
var fablab = require('fablab');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);

io.sockets.on('connection', function(socket) {
  console.log('--------------');
  console.log('Socket io is connected.');
  console.log('--------------');
  app.set('socket',socket);
});

function connectArduino()
{
	//setup serial
	sp.list(function(error,ports){

	  var port_A = null;
	  var port_B = null;

	  for(var i=0; i < ports.length;i++){
	    var p = ports[i];

	    if(p.manufacturer && p.manufacturer.indexOf('Arduino') != -1){

	      //if(port_A == null){
	      if(p.manufacturer.indexOf('Arduino LLC') != -1){

		  port_A = new SerialPort(p.comName,function(err){
		    if(err){
		      console.log('Error:', err.message);
		    }
		  });

		  port_A.on('close',function(){
        console.log("Arduino port A closed");
        reconnectArduino();
		  });

		  port_A.on('open',function(){
		    console.log('Serial port A opened');
		    console.log(port_A);

		    console.log('set serial to port A');
		    app.set('serial',port_A);

		    var card_A_str = '';
		    port_A.on('data',function(data){
		      var str = '';
		      for(var i = 0; i < data.length;i++){
			      str += String.fromCharCode(data[i]);
		      }
		      str = str.trim();

		      if(str.indexOf('<') != -1 && str.indexOf('>') != -1) str = normalizeCardID(str);
		      console.log(str +',length:'+ str.length);

		      //if((str.length == 11 || str.length == 20) && !isNaN(parseInt(str,16))){
		      if((str.length == 11 || str.length == 20) ){
            var s = app.get('socket');
            if(!s) return checkAccess(str);
            s.emit('card',{card:str});
            return;
		      }

		      if(str.indexOf('<') != -1){
			      card_A_str = str.slice(str.indexOf('<'));
		      }

		      if(str.indexOf('<') == -1 && str.indexOf('>') == -1){
			      card_A_str += str;
		      }

		      if(str.indexOf('>') != -1){
			      card_A_str += str.slice(0,str.indexOf('>') + 1);
		      }

		      if(card_A_str.indexOf('<') != -1 && card_A_str.indexOf('>') != -1){
            var card = normalizeCardID(card_A_str);
            var s = app.get('socket');
            if(!s) return checkAccess(card);
            s.emit('card',{card:card});
		      }

		    });
		  });
		  continue;
	      }

	      if(p.manufacturer.indexOf('www.arduino.cc') != -1){

		  port_B = new SerialPort(p.comName,function(err){
		    if(err){
		      console.log('Error:', err.message);
		    }
		  });

		  port_A.on('close',function(){
        console.log("Arduino port B closed");
        reconnectArduino();
		  });

		  port_B.on('open',function(){
		    console.log('Serial port B opened');
		    console.log(port_B);

		    var card_B_str = '';
		    port_B.on('data',function(data){

		      var str = '';
		      for(var i = 0; i < data.length;i++){
			      str += String.fromCharCode(data[i]);
		      }
		      str = str.trim();


		      if(str.indexOf('<') != -1 && str.indexOf('>') != -1) str = normalizeCardID(str);
		      console.log(str +',length:'+ str.length);

		      //if((str.length == 11 || str.length == 20) && !isNaN(parseInt(str,16))){
		      if((str.length == 11 || str.length == 20) ){
            var s = app.get('socket');

            if(!s) return checkAccess(str);
            s.emit('card',{card:str});
            return;
		      }

		      if(str.indexOf('<') != -1){
			      card_B_str = str.slice(str.indexOf('<'));
		      }

		      if(str.indexOf('<') == -1 && str.indexOf('>') == -1){
			      card_B_str += str;
		      }

		      if(str.indexOf('>') != -1){
			      card_B_str += str.slice(0,str.indexOf('>') + 1);
		      }

		      if(card_B_str.indexOf('<') != -1 && card_B_str.indexOf('>') != -1){
            var card = normalizeCardID(card_B_str);
            var s = app.get('socket');

            if(!s) return checkAccess(card);
            s.emit('card',{card:card});
		      }

		    });
		  });
		  continue;
	      }
	    }
	  }

	});
}

connectArduino();

function checkAccess(card_uid){
  var result = fablab.access(card_uid);

  if(result.status == 'OK'){
    var port = req.app.get('serial');
    if(port){
      console.log('sending opening msg');
      port.write('open'+"\n");
    } else {
      console.log('no port reference - fail to send');
    }
  }
}

function reconnectArduino(){
	setTimeout(function(){
		console.log('Reconnecting boards');
		connectArduino();
	},2000);
}

function normalizeCardID(card){
  card = card.replace('<','');
  card = card.replace('>','');
  card = card.trim();

  card = card.split(' ').join('');
  var c = '';
  for(var i = 0; i < card.length;i ++){
    if(i % 2 == 0) c+= ' ';
    c+= card[i];
  }
  return c.trim();
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.log(error);

  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
